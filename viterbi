# -*- coding: utf-8 -*-
"""
Created on Sat Nov 15 10:08:29 2014

@author: Asus Pad
"""
import numpy as np

def viterbi(obs, states, start_p, trans_p, emit_p):
    V = [{}]
    path = {}
  
    # Initialize base cases (t == 0)
    for y in states:
        V[0][y] = start_p[y] * emit_p[y][obs[0]]
        path[y] = [y]
 
    # Run Viterbi for t > 0
    for t in range(1, len(obs)):
        V.append({})
        newpath = {}
 
        for y in states:
            (prob, state) = max((V[t-1][y0] * trans_p[y0][y] * emit_p[y][obs[t]], y0) for y0 in states)
            V[t][y] = prob
            newpath[y] = path[state] + [y]
 
        # Don't need to remember the old paths
        path = newpath
    n = 0           # if only one element is observed max is sought in the initialization values
    if len(obs) != 1:
        n = t
    print_dptable(V)
    (prob, state) = max((V[n][y], y) for y in states)
    return (prob, path[state])
 
# Don't study this, it just prints a table of the steps.
def print_dptable(V):
    s = "" + "  ".join(("%7d" % i) for i in range(len(V))) + "\n"
    for y in V[0]:
        s += "%.5s: " % y
        s += "  ".join("%.7s" % ("%f" % v[y]) for v in V)
        s += "\n"
    print(s)

states = [0, 1]
observations = [0,1,2]
start_probability = np.array([0.8, 0.2])
transition_probability = np.array([
  [0.7, 0.5],
  [0.3, 0.5]
])

emission_probability = np.array([
  [0.9, 0.3, 0.5],
  [0.1, 0.7, 0.5]
])
print viterbi(observations,states,start_probability,transition_probability,emission_probability)
